struct qtn_node_shared_stats_tx {
	uint32_t max_queue;
	uint32_t last_mcs;
	uint32_t last_tx_scale;
	uint32_t ralg_inv_phy_rate;
	uint32_t avg_rssi_dbm;
	uint32_t cost;
	uint32_t pkts;
	uint32_t txdone_failed_cum;
	uint32_t avg_per;
	uint32_t pkts_per_sec;
	uint32_t avg_tx_phy_rate;
	uint32_t acks;
	uint32_t tx_airtime;
	uint32_t tx_accum_airtime;
	uint32_t tx_sent_data_msdu[WMM_AC_NUM];
};
struct qtn_node_shared_stats_rx {
	uint32_t last_rssi_dbm[NUM_ANT + 1];
	uint32_t rssi_dbm_smoothed[NUM_ANT + 1];
	uint32_t last_rcpi_dbm[NUM_ANT + 1];
	uint32_t rcpi_dbm_smoothed[NUM_ANT + 1];
	uint32_t last_evm_dbm[NUM_ANT + 1];
	uint32_t evm_dbm_smoothed[NUM_ANT + 1];
	uint32_t last_hw_noise[NUM_ANT + 1];
	uint32_t last_rxsym;
	uint32_t last_mcs;
	uint32_t pkts;
	uint32_t pkts_cum;
	uint32_t inv_phy_rate_smoothed;
	uint32_t cost;
	uint32_t rx_airtime;
	uint32_t rx_accum_airtime;
};
struct qtn_node_shared_stats {
	struct qtn_node_shared_stats_tx tx[STATS_MAX];
	struct qtn_node_shared_stats_rx rx[STATS_MAX];
	uint64_t beacon_tbtt;
	uint64_t beacon_tbtt_jiffies;
	uint64_t last_rx_jiffies;
	uint64_t dtim_tbtt;
	uint32_t tim_set;
	uint32_t dtim_set;
	uint16_t beacon_interval;
	TAILQ_ENTRY(qtn_node_shared_stats) next;
};
struct qtn_rx_stats {
	u_int32_t num_pkts;
	u_int32_t num_amsdu;
	u_int32_t avg_rxgain;
	u_int32_t cnt_mac_crc;
	u_int32_t cnt_sp_fail;
	u_int32_t cnt_lp_fail;
	u_int32_t hw_noise;
	u_int32_t max_init_gain;
	u_int32_t sys_temp;
	u_int32_t last_rx_mode;
	u_int32_t last_rx_bw;
	u_int32_t last_rx_mcs;
	u_int32_t rx_gain_fields;
	u_int32_t last_rssi_evm[NUM_ANT];
	u_int32_t last_rssi_all;
	u_int32_t last_rxsym;
};
struct qtn_tx_stats {
	u_int32_t num_pkts;
	u_int32_t num_defers;
	u_int32_t num_timeouts;
	u_int32_t num_retries;
	u_int32_t last_tx_scale;
	u_int32_t last_tx_mode;
	u_int32_t last_tx_bw;
	u_int32_t last_tx_mcs;
	u_int32_t rate;		
};
struct qtn_stats {
	u_int32_t tstamp;
	struct qtn_rx_stats rx_phy_stats;
	struct qtn_rx_stats mu_rx_phy_stats;
	struct qtn_tx_stats tx_phy_stats;
	struct qtn_tx_stats mu_tx_phy_stats;
};
struct qtn_stats_log {
	int curr_buff;
	struct qtn_stats stat_buffs[NUM_LOG_BUFFS];
	struct muc_rx_stats *rx_muc_stats;
	struct muc_rx_rates *rx_muc_rates;
	struct muc_rx_bf_stats *rx_muc_bf_stats;
	struct muc_tx_stats *tx_muc_stats;
	struct qtn_rate_tx_stats_per_sec *tx_muc_rates;
	uint32_t *muc_su_rate_stats_read;
	uint32_t *muc_mu_rate_stats_read;
	uint32_t *scs_cnt;
	uint32_t pad[7];
};
struct qtn_micro_stats {
	uint32_t tx_msdu;
	uint32_t rx_msdu;
};
struct qtn_micro_stats_log {
	struct qtn_micro_stats latest_stats;
	uint32_t curr_idx;
	struct qtn_micro_stats micro_stats[QTN_MICRO_STATS_NUM];
};
struct muc_tx_stats {
	u_int32_t	bcn_enq_failed;
	u_int32_t	tx_status_set;
	u_int32_t	pkt_from_host;
	u_int32_t	host_intr;
	u_int32_t	netbuf_alloc_failed;
	u_int32_t	mgm_before_encap;
	u_int32_t	mgm_after_encap;
	u_int32_t	pkt_before_encap;
	u_int32_t	pkt_after_encap;
	u_int32_t	pkt_push_back;
	u_int32_t	pkt_to_hw;
	u_int32_t	pkt_to_hw_deferred;
	u_int32_t	fd_absent;
	u_int32_t	fd_not_ready;
	u_int32_t	pkt_fd_available;
	u_int32_t	pkt_add_node;
	u_int32_t	pkt_add_q;
	u_int32_t	pkt_qtn_hardstart;
	u_int32_t	tx_reserved;
	u_int32_t	tx_reserve_fail;
	u_int32_t	txalert_mu_ndp_update;
	u_int32_t	txalert_mu_rpt_poll;
	u_int32_t	txalert_mu_queue_full;
	u_int32_t	txalert_mu_queue_fail;
	u_int32_t	sample_rate_mu;
	u_int32_t	sample_bw_mu;
	u_int32_t	txdone_intr;
	u_int32_t	txalert_intr;
	u_int32_t	txalert_tasklet;
	u_int32_t	txalert_bcn_update;
	u_int32_t	txalert_ndp_update;
	u_int32_t	tx_ndp_q_occupied;
	u_int32_t	tx_ndp_start;
	u_int32_t	tx_pwr;
	u_int32_t	bcn_scheme_power_save;
	u_int32_t	bcn_scheme;
	u_int32_t	tx_mcast_pwr;
	u_int32_t	tx_mcast_defer;
	u_int32_t	tx_mcast_defer_hwq;
	u_int32_t	tx_limit_drop;
	u_int32_t	fd_acquire;
	u_int32_t	fd_release;
	u_int32_t	fd_acq_fail;
	u_int32_t	fd_acq_fail_frms;
	u_int32_t	fd_acq_hal_fail;
	u_int32_t	fd_acq_hal_fail_frms;
	u_int32_t	ba_send;
	u_int32_t	ba_del;
	u_int32_t	fd_free_nodeclean;
	u_int32_t	msdu_expired;
	u_int32_t	tx_window_locked;
	u_int32_t	tx_window_failed;
	u_int32_t	tx_restrict_probe;
	u_int32_t	tx_restrict_mode;
	u_int32_t	tx_restrict_drop;
	u_int32_t	tx_restrict_delay;
	u_int32_t	tx_restrict_send;
	u_int32_t	tx_sample_pkts;
	u_int32_t	tx_sample_bytes;
	u_int32_t	tx_underflow;
	u_int32_t	tx_hal_enqueued;
	u_int32_t	txbf_mode;
	u_int32_t	psel_matrix;
	u_int32_t	sample_rate;
	u_int32_t	sample_bw;
	uint32_t	ra_flags;
	u_int32_t	fd_balance;
	uint32_t	invalid_delay;
	uint32_t	halt_tx;
	uint32_t	resume_tx;
	uint32_t	rfctrl_on;
	uint32_t	rfctrl_off;
	uint32_t	go_offchan;
	uint32_t	go_datachan;
	uint32_t	defer_cc;
	uint32_t	deferred_cc_done;
	uint32_t	off_chan_sample;
	uint32_t	off_chan_scan;
	uint32_t	off_chan_cac;
	uint32_t	cca_pri;
	uint32_t	cca_sec;
	uint32_t	cca_sec40;
	uint32_t	cca_busy;
	uint32_t	cca_fat;
	uint32_t	cca_intf;
	uint32_t	cca_trfc;
	uint32_t	mu_prec_snd_tx;
	uint32_t	mu_prec_snd_wait_done;
	uint32_t	mu_grp_sel_snd_tx;
	uint32_t	mu_grp_sel_snd_wait_done;
	uint32_t	oc_auctx_timeout;
	uint32_t	oc_auctx_overwrite;
	uint32_t	oc_auctx_fail;
	uint32_t	gi_cnt;			
	uint32_t	gi_ncidx;		
	uint32_t	gi_val;			
	uint32_t	select_state_ncidx;	
	uint32_t	select_state_val;	
	uint32_t	pppc_scale_cnt;		
	uint32_t	pppc_scale_ncidx;	
	uint32_t	pppc_scale_val;		
	uint32_t	pppc_scale_last_gput;		
	uint32_t	pppc_scale_last_gput_idx;	
	uint32_t	pppc_scale_base_cnt;		
	uint32_t	pppc_scale_base_20m;	
	uint32_t	pppc_scale_base_40m;	
	uint32_t	pppc_scale_base_80m;	
	uint32_t	pppc_scale_base_copy;	
	uint32_t	pppc_scale_overstep;	
	uint32_t	pppc_scale_rollback;	
	uint32_t	pppc_0_gput;		
	uint32_t	tx_max_power;
	uint32_t	nc_csr_read_count;	
	uint32_t	nc_csr_write_count;	
	uint32_t	nc_csr_done_watermark;	
	uint32_t	nc_csr_watermark_count;
	uint32_t	auc_dtim_notify;
	uint32_t	auc_ps_notify;
	uint32_t	tx_beacon_done;
	uint32_t	sfs_peer_rts;
	uint32_t	sfs_peer_rts_flags;
	uint32_t	sfs_local_rts;
	uint32_t	sfs_local_rts_flags;
	uint32_t	sfs_dyn_wmm;
	uint32_t	sfs_dyn_wmm_flags;
	uint32_t	auc_wmm_ps_notify;
	uint32_t	tx_wmm_ps_null_frames;
	uint32_t	qtn_bcn_stop;
	uint32_t	mu_grp_snd_queue_is_not_empty;
	uint32_t	mu_prec_snd_queue_is_not_empty;
	uint32_t	mu_group_delete;
	uint32_t	mu_group_install;
	uint32_t	mu_group_rate_node_updates;
	uint32_t	mu_update_rates_mu;
	uint32_t	mu_update_rates_su;
	uint32_t	autocs_sample_bits;
	uint32_t	autocs_adjust_bits;
	uint32_t	autocs_step_size;
	uint32_t	autocs_cs_thresh;
	uint32_t	autocs_min_rssi;
	uint32_t	bmps_null_tx_success;
	uint32_t	bmps_null_tx_fail;
	uint32_t	bmps_null_tx_timeout;
	uint32_t	txqueue_g1q0_deadline_frozen;	
	uint32_t	auc_ipc_retry;
	uint32_t	auc_ipc_hwm;
	uint32_t	auc_ipc_send_delay;
	uint32_t	auc_ipc_send_delay_hwm;
};
struct muc_rx_stats {
	u_int32_t	rxdesc_pop_from_host;
	u_int32_t	rxdesc_get_from_queue;
	u_int32_t	rxdesc_push_to_host;
	u_int32_t	rxdesc_non_aggr_push_to_host;
	u_int32_t	rxdesc_flush_to_host;
	u_int32_t	rxdesc_reuse_push;
	u_int32_t	rxdesc_reuse_pop;
	u_int32_t	rxdesc_status_bad_dur;
	u_int32_t	rxdesc_status_bad_len;
	u_int32_t	rxdesc_slow_status;
	u_int32_t	rxdesc_fast_status;
	u_int32_t	rxdesc_status_crc_err;
	u_int32_t	rxdesc_status_cmic_err;
	u_int32_t	rxdesc_status_cmic_no_crc_err;
	u_int32_t	rxdesc_status_retry;
	u_int32_t	agg_stored;
	u_int32_t	agg_duplicate;
	u_int32_t	accel_mpdu;
	u_int32_t	accel_msdu;
	u_int32_t	accel_no_buffer;
	u_int32_t	accel_fwt_lu_timeout;
	u_int32_t	accel_mcast_send;
	u_int32_t	accel_mcast_drop;
	u_int32_t	accel_no_match;
	u_int32_t	accel_drop;
	u_int32_t	accel_err;
	u_int32_t	rate_train_chk;
	u_int32_t	rate_train_err;
	u_int32_t	rate_train_delay;
	u_int32_t	rate_train_none;
	u_int32_t	rate_train_hash_bad;
	u_int32_t	rate_train_hash_good;
	u_int32_t	agg_oldpkts;
	u_int32_t	agg_very_oldpkts;
	u_int32_t	agg_evict_in_order;
	u_int32_t	agg_evict_in_move;
	u_int32_t	agg_evict_empty;
	u_int32_t	agg_timeout;
	u_int32_t	agg_rxwin_reset;
	u_int32_t	rx_qnum_err;
	u_int32_t	rx_mgmt;
	u_int32_t	rx_ctrl;
	u_int32_t	rx_pspoll;
	u_int32_t	rx_pwr_mgmt;
	u_int32_t	rx_delba;
	u_int32_t	rx_pwr_mgmt_set;
	u_int32_t	rx_pwr_mgmt_reset;
	u_int32_t	rx_emergency;
	u_int32_t	rx_underflow;
	u_int32_t	rx_desc_underflow;
	u_int32_t	rx_desc_linkerr;
	u_int32_t	rx_notify;
	u_int32_t	rx_df_numelems;
	u_int32_t	last_recv_seq;
	u_int32_t	rx_node_not_found;
	u_int32_t	rx_non_qos_duplicate;
	u_int32_t	rx_11n_ndp;
	u_int32_t	rx_11ac_ndp;
	u_int32_t	rx_ndp_inv_slot;
	u_int32_t	rx_11n_ndp_no_capt;
	u_int32_t	rx_ndp_sw_processed;
	u_int32_t	rx_ndp_lockup;
	u_int32_t	rx_11n_bf_act;
	u_int32_t	rx_11ac_bf_act;
	u_int32_t	rx_bf_act_inv_slot;
	u_int32_t	rx_amsdu;
	u_int32_t	rx_data;
	u_int32_t	prev_rx_data;
	u_int32_t	rx_recv_qnull;
	u_int32_t	rx_recv_act;
	u_int32_t	rx_recv_bcn;
	u_int32_t	rx_recv_auth;
	u_int32_t	rx_recv_assoc_req;
	u_int32_t	rx_recv_assoc_res;
	u_int32_t	rx_recv_deauth;
	u_int32_t	rx_recv_disassoc;
	u_int32_t	rx_mcs_gt_76;
	u_int32_t	tkip_keys;		
	u_int32_t	rx_tkip_mic_err;	
	u_int32_t	icv_errs;
	u_int32_t	tmic_errs;
	u_int32_t	cmic_errs;
	u_int32_t	crc_errs;
	u_int32_t	ba_tx;
	u_int32_t	ba_rx;
	u_int32_t	ba_rx_fail;
	u_int32_t	sec_oflow;
	u_int32_t	str_oflow;
	u_int32_t	oflow_fixup_timeout;
	u_int32_t	rxdone_intr;
	u_int32_t	rxtypedone_intr;
	u_int32_t	ipc_a2m_intr;
	u_int32_t	tqe_intr;
	u_int32_t	tqe_in_port_lhost;
	u_int32_t	tqe_in_port_bad;
	u_int32_t	tqe_a2m_type_txfb;
	u_int32_t	tqe_a2m_type_rxpkt;
	u_int32_t	tqe_a2m_type_unknown;
	u_int32_t	tqe_reschedule_task;
	u_int32_t	tqe_desc_unowned;
	u_int32_t	bb_intr;
	u_int32_t	bb_irq_dleaf_oflow;
	u_int32_t	bb_irq_leaf_uflow;
	u_int32_t	bb_irq_leaf_ldpc_uflow;
	u_int32_t	bb_irq_tx_td_oflow_intr;
	u_int32_t	bb_irq_tx_td_uflow_intr;
	u_int32_t	bb_irq_rx_sm_wdg_intr;
	u_int32_t	bb_irq_rx_long_dur;
	u_int32_t	bb_irq_rx_11ac_timeout;
	u_int32_t	bb_irq_tx_sm_wdg_intr;
	u_int32_t	bb_irq_main_sm_wdg_intr;
	u_int32_t	bb_irq_hready_wdg_intr;
	u_int32_t	mac_irq_rx_sec_buff_oflow;
	u_int32_t	mac_irq_rx_strq_oflow;
	u_int32_t	mac_irq_rx_bb_uflow_intr;
	u_int32_t	mac_irq_rx_bb_oflow_intr;
	u_int32_t	bb_irq_hready_wdg_reset;
	u_int32_t	sreset_wdg_begin;
	u_int32_t	sreset_wdg_end;
	u_int32_t	sreset_wdg_in_place;
	u_int32_t	sreset_wdg_tx_beacon_hang;
	u_int32_t	sreset_wdg_tx_hang;
	u_int32_t	sreset_wdg_pm_corrupt;
	u_int32_t	sreset_wdg_tcm_corrupt;
	u_int32_t	sreset_wdg_rx_done;
	u_int32_t	sreset_wdg_in_place_try;
	u_int32_t	sreset_wdg_tasklet_sched_1;
	u_int32_t	sreset_wdg_tasklet_sched_2;
	u_int32_t	sreset_tasklet_sched;
	u_int32_t	sreset_tasklet_begin;
	u_int32_t	sreset_tasklet_end;
	u_int32_t	hreset_req;
	u_int32_t	sreset_begin;
	u_int32_t	sreset_end;
	u_int32_t	sreset_dma_rx_inprog;
	u_int32_t	sreset_dma_tx_inprog;
	u_int32_t	sreset_dma_rx_max_wait;
	u_int32_t	sreset_dma_tx_max_wait;
	u_int32_t	sreset_dma_tx_hang;
	u_int32_t	sreset_dma_rx_hang;
	u_int32_t	sreset_dma_rx_wait_timeout;
	u_int32_t	sreset_dma_tx_wait_timeout;
	u_int32_t	sreset_drop_not_valid;
	u_int32_t	sreset_drop_bad_addr;
	u_int32_t	rf_cmpvtune_out;
	u_int32_t	rf_cal_freq;
	u_int32_t	ac_max;
	u_int32_t	ac_min;
	u_int32_t	ac_cur;
	u_int32_t	ac_adj;
	u_int32_t	rx_gain;
	u_int32_t	rd_cache_indx;
	u_int32_t	logger_sreset_wmac1_dma_rx_inprog;
	u_int32_t	logger_sreset_wmac1_dma_tx_inprog;
	u_int32_t	logger_sreset_wmac1_dma_rx_max_wait;
	u_int32_t	logger_sreset_wmac1_dma_tx_max_wait;
	u_int32_t	logger_sreset_wmac1_dma_tx_hang;
	u_int32_t	logger_sreset_wmac1_dma_rx_hang;
	u_int32_t	logger_sreset_wmac1_dma_rx_wait_timeout;
	u_int32_t	logger_sreset_wmac1_dma_tx_wait_timeout;
	u_int32_t	mu_rx_pkt;
	u_int32_t	pduty_sleep;
	u_int32_t	pduty_rxoff;
	u_int32_t	pduty_period;
	u_int32_t	pduty_pct;
	u_int32_t	soft_ring_push_to_tqe;
	u_int32_t	soft_ring_empty;
	u_int32_t	soft_ring_not_empty;
	u_int32_t	soft_ring_add_force;
	u_int32_t	soft_ring_add_to_head;
	u_int32_t	soft_ring_add_continue;
	u_int32_t	soft_ring_free_pool_empty;
	u_int32_t	mimo_ps_mode_switch;	
	u_int32_t	rx_vlan_drop;
	u_int32_t	auto_cca_state;
	u_int32_t	auto_cca_th;
	u_int32_t	auto_cca_spre;
	u_int32_t	auto_cca_intf;
	u_int32_t	total_dmem_alloc;
	u_int32_t	total_dram_alloc;
	u_int32_t	dmem_alloc_fails;
	u_int32_t	dram_alloc_fails;
	u_int32_t	total_dmem_free;
	u_int32_t	total_dram_free;
	u_int32_t	rx_bw_80;
	u_int32_t	rx_bw_40;
	u_int32_t	rx_bw_20;
	uint32_t	rx_wmm_ps_trigger;
	uint32_t	rx_wmm_ps_set;
	uint32_t	rx_wmm_ps_reset;
	uint32_t	rx_intr_next_ptr_0;
	uint32_t	rx_hbm_pool_depleted;
	uint32_t	rxq_intr[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_fill[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_nobuf[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_stop[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_pkt[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_bad_status[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_pkt_oversize[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_pkt_delivered[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_status_hole_chk_num[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_status_hole_chk_step_sum[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_status_hole_chk_step_max[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_status_hole[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_status_hole_max_size[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_process_max[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_process_sum[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_process_num[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_process_limited[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rxq_desc_chain_empty[QTN_FW_WMAC_RX_QNUM];
	uint32_t	rx_data_last_seqfrag;
	uint32_t	rx_data_last_ip_id;
	uint32_t	accel_l2_ext_filter;
	uint32_t	accel_mc_send_l2_ext_filter;
	uint32_t	accel_mc_drop_l2_ext_filter;
	uint32_t	rx_frame_addressed_to_wrong_bss;
};
struct muc_rx_rates {
	u_int32_t rx_mcs[MUC_HT_NUM_RATES];
	u_int32_t rx_mcs_11ac[MUC_VHT_NUM_RATES];
};
struct muc_rx_bf_stats {
	u_int32_t	rx_bf_valid[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_aid[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_ng[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11n_ndp[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_ndp[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11n_act[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_act[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_grp_sel[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_prec[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_su[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_bad[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	rx_bf_11ac_dsp_fail[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	mu_grp_add[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	mu_grp_del[QTN_STATS_NUM_BF_SLOTS];
	u_int32_t	msg_buf_alloc_fail;
};
struct qtn_rate_stats_mcs_data {
	uint16_t	mcs_rate;
	uint16_t	rate_index;
	uint16_t	state;
	uint16_t	pkt_total;
	uint16_t	pkt_error;
	uint16_t	pkt_hw_retry;
	uint16_t	pkt_sample;
	uint16_t	avg_per;
};
struct qtn_rate_su_tx_stats {
	uint32_t			seq_no;
	uint32_t			timestamp;
	uint32_t			flags;
	uint16_t			sampling_index;
	uint16_t			sampling_rate;
	struct qtn_rate_stats_mcs_data	mcs_data[RATES_STATS_NUM_TX_RATES];
};
struct qtn_rate_mu_tx_stats {
	struct qtn_rate_su_tx_stats group_stats[RATES_STATS_MAX_USER_IN_GROUP];
};
struct qtn_rate_gen_stats {
	u_int16_t   rx_mcs_rates[RATES_STATS_NUM_RX_RATES];
	u_int32_t  rx_mcs[RATES_STATS_NUM_RX_RATES];
	u_int32_t  rx_crc;
	u_int32_t  rx_sp_errors;
	u_int32_t  rx_lp_errors;
	u_int32_t  rx_evm[RATES_STATS_EVM_CNT];
	u_int32_t  tx_subframe_success;
	u_int32_t  tx_subframe_fail;
	u_int32_t  tx_mgmt_success;
	u_int32_t  tx_hw_retry;
	u_int32_t  tx_sw_retry;
};
struct qtn_rate_tx_stats_per_sec {
	struct qtn_rate_su_tx_stats  stats_su[RATES_STATS_NUM_ADAPTATIONS];
	struct qtn_rate_mu_tx_stats  stats_mu[RATES_STATS_NUM_ADAPTATIONS];
};
struct auc_dbg_counters {
	uint32_t task_alive_counters[AUC_TID_NUM];
	uint32_t task_false_trigger[AUC_TID_NUM];
	uint32_t tqew_ac[4];
	uint32_t tqew_ac_avail[4];
	uint32_t tqew_air_humble;
	uint32_t tqew_air_suppress;
	uint32_t tqew_air_use_idletime;
	uint32_t tqew_air_dequeue_only;
	uint32_t tqew_pkt_pending_for_txdone;
	uint32_t tqew_descr_alloc_fail;
	uint32_t tqew_ring_alloc_fail;
	uint32_t tqew_pop_alloc_fail;
	uint32_t tqew_pop_sw_limit;
	uint32_t tqew_pop_empty;
	uint32_t tqew_available_set;
	uint32_t tqew_available_reset;
	uint32_t tqew_rx;
	uint32_t tqew_drop;
	uint32_t tqew_free;
	uint32_t tqew_buf_invalid;
	uint32_t wmac_tx_done[4];
	uint32_t agg_aggregate_flag;
	uint32_t agg_aggressive_agg;
	uint32_t hdrs_available_recent_min;
	uint32_t agg_states[QTN_AUC_TID_TX_STATE_MAX + 1];
	uint32_t ethq_push;
	uint32_t ethq_pop;
	uint32_t agg_aggregate_mpdu;
	uint32_t agg_aggregate_msdu;
	uint32_t agg_singleton_mpdu;
	uint32_t agg_singleton_mgmt;
	uint32_t agg_singleton_ctl;
	uint32_t agg_singleton_probe;
	uint32_t agg_4K_amsdu;
	uint32_t agg_8K_amsdu;
	uint32_t agg_11K_amsdu;
	uint32_t tx_feedback_success;
	uint32_t tx_feedback_fail;
	uint32_t tx_done_status_success;
	uint32_t tx_done_status_timeout;
	uint32_t tx_done_status_xretry;
	uint32_t tx_done_status_timeout_xretry;
	uint32_t tx_done_pkt_chain_reset;
	uint32_t tx_done_pkt_chain_success;
	uint32_t tx_done_pkt_chain_drop_tid_down;
	uint32_t tx_done_pkt_chain_drop_xattempts;
	uint32_t tx_done_singleton_finish;
	uint32_t tx_done_singleton_swretry;
	uint32_t tx_done_aggregate_finish;
	uint32_t tx_done_aggregate_hwretry;
	uint32_t tx_done_aggregate_swretry;
	uint32_t tx_done_mpdu_swretry;
	uint32_t tx_sample;
	uint32_t tx_bw_sample;
	uint32_t tx_swretry_lower_bw;
	uint32_t tx_swretry_agg_exceed;
	uint32_t tx_scale_base_20m;
	uint32_t tx_scale_base_40m;
	uint32_t tx_scale_base_80m;
	uint32_t tx_scale_max;
	uint32_t tx_scale_overstep;
	uint32_t alloc_tqew_fast;
	uint32_t free_tqew_fast;
	uint32_t alloc_tqew_slow;
	uint32_t free_tqew_slow;
	uint32_t alloc_tqew_local;
	uint32_t free_tqew_local;
	uint32_t alloc_hdr_fast;
	uint32_t free_hdr_fast;
	uint32_t alloc_hdr_slow;
	uint32_t free_hdr_slow;
	uint32_t alloc_msdu_hdr_failed;
	uint32_t alloc_mpdu_hdr_failed;
	uint32_t alloc_tid_superfast;
	uint32_t free_tid_superfast;
	uint32_t alloc_tid_fast;
	uint32_t free_tid_fast;
	uint32_t alloc_tid_slow;
	uint32_t free_tid_slow;
	uint32_t alloc_node_rate_fast;
	uint32_t free_node_rate_fast;
	uint32_t alloc_node_rate_slow;
	uint32_t free_node_rate_slow;
	uint32_t alloc_node_superfast;
	uint32_t free_node_superfast;
	uint32_t alloc_node_fast;
	uint32_t free_node_fast;
	uint32_t alloc_fcs;
	uint32_t free_fcs;
	uint32_t alloc_mac_descr;
	uint32_t free_mac_descr;
	uint32_t tx_mac_push;
	uint32_t tx_mac_idle;
	uint32_t tx_mac_rts;
	uint32_t tx_mac_cts2self;
	uint32_t tx_vlan_drop;
	uint32_t tx_acm_drop;
	uint32_t tx_ps_drop;
	uint32_t ocs_tx_suspend;
	uint32_t ocs_tx_resume;
	uint32_t ocs_singleton_suspend;
	uint32_t ocs_ampdu_suspend;
	uint32_t ocs_frame_created;
	uint32_t pwr_mgmt_awake;
	uint32_t pwr_mgmt_sleep;
	uint32_t pwr_mgmt_tx;
	uint32_t pspoll_rx;
	uint32_t dtim_q_push;
	uint32_t dtim_q_pop;
	uint32_t dtim_trigger;
	uint32_t dtim_q_overflow;
	uint32_t tx_restrict_dropped;
	uint32_t tx_throt_dropped;
	uint32_t tx_block_singleton;
	uint32_t tx_force_unblock_tid;
	uint32_t tx_ctl_pkt_hbm_alloc_fails;
	uint32_t tx_ctl_pkt_alloc_descr_fails;
	uint32_t tx_bar_alloc_ctl_pkt_fails;
	uint32_t tx_valid_bit_not_set;
	uint32_t wmm_ps_tx;
	uint32_t wmm_ps_tx_null_frames;
	uint32_t wmm_ps_tx_more_data_frames;
	uint32_t wmm_ps_tx_eosp_frames;
	uint32_t mu_tx_su_count;	
	uint32_t mu_tx_send_mu_fail;	
	uint32_t mu_tx_push_count;
	uint32_t mu_tx_done_count;
	uint32_t mu_tx_done_succ;	
	uint32_t mu_tx_done_fail;
	uint32_t mu_tx_sample;
	uint32_t mu_bar_bitmap_non_zero;
	uint32_t mu_bar_bitmap_zero;
	uint32_t mu_mac_wmac1_ipc_push;
	uint32_t mu_mac_wmac1_auc_push;
	uint32_t mu_wmac1_resets;
	uint32_t mu_tx_swretry_agg_exceed;
	uint32_t mu_tx_buddy_try;
	uint32_t mu_tx_buddy_fail_wmac;
	uint32_t mu_tx_buddy_fail_ptid;
	uint32_t mu_tx_buddy_fail_rate;
	uint32_t mu_tx_buddy_fail_create_agg;
	uint32_t mu_tx_buddy_mu_only_timeout;
	uint32_t mu_tx_another_q_push_succ;
	uint32_t mu_tx_another_q_push_fail;	
	uint32_t mu_tx_buddy_multi_tid;
	uint32_t mu_tx_wmac_0_done_count;
	uint32_t mu_tx_wmac_0_bitmap_non_zero;
	uint32_t mu_tx_wmac_0_bitmap_zero;
	uint32_t mu_tx_wmac_0_done_timeout;
	uint32_t mu_tx_wmac_0_done_succ;
	uint32_t mu_tx_wmac_0_done_fail;
	uint32_t mu_tx_wmac_1_done_succ;
	uint32_t mu_tx_wmac_1_done_fail;
	uint32_t mu_tx_wmac_0_mpdu_total;
	uint32_t mu_tx_wmac_0_mpdu_succ;
	uint32_t mu_tx_wmac_1_mpdu_total;
	uint32_t mu_tx_wmac_1_mpdu_succ;
	uint32_t mu_tx_qnum[AUC_FW_WMAC_TX_QNUM];
	uint32_t tqe_sema_fails;
};
struct qtn_skb_recycle_stats {
	u32 free_recycle_pass;
	u32 free_recycle_fail;
	u32 free_recycle_fail_undersize;
	u32 alloc_recycle;
	u32 alloc_kmalloc;
};
struct qtn_skb_recycle_list {
	struct sk_buff_head list;			
	int		max;				
	struct qtn_skb_recycle_stats stats_qdrv;	
	struct qtn_skb_recycle_stats stats_eth;		
	|| defined(CONFIG_TOPAZ_PCIE_HOST) || defined(CONFIG_TOPAZ_PCIE_TARGET)
	struct qtn_skb_recycle_stats stats_pcie;	
	struct qtn_skb_recycle_stats stats_kfree;	
	int (*recycle_func)(struct qtn_skb_recycle_list *recycle_list,
				struct sk_buff *skb);	
};
struct qdrv_node {
	struct ieee80211_node qn_node;
	struct kobject kobj;
	TAILQ_ENTRY(qdrv_node) qn_next;
	uint16_t qn_node_idx;		
};
struct qdrv_memdebug_watchpt {
	uint32_t	addr;
	void	*remap_addr;
	size_t	size;
};
struct qdrv_meminfo {
	struct kmem_cache *caches[QDRV_SLAB_IDX_MAX];
};
struct qtn_auc_stat_field {
	uintptr_t addr;
	const char *name;
};
struct qdrv_auc_intr_stats {
	uint32_t sleep;
	uint32_t jiffies;
	uint32_t aucirq[AUC_TID_NUM];
};
struct qdrv_pktlogger_stats {
	uint32_t pkt_queued;
	uint32_t pkt_dropped;
	uint32_t pkt_failed;
	uint32_t pkt_requeued;
	uint32_t queue_send;
};
struct qdrv_pktlogger {
	struct qdrv_wlan *qw;
	struct net_device *dev;
	__be32 dst_ip;
	__be32 src_ip;
	__be16 dst_port;
	__be16 src_port;
	uint8_t dst_addr[IEEE80211_ADDR_LEN];
	uint8_t src_addr[IEEE80211_ADDR_LEN];
	uint8_t recv_addr[IEEE80211_ADDR_LEN];
	uint32_t maxfraglen;
	uint32_t flag;
	uint16_t ip_id;
	spinlock_t sendq_lock;
	STAILQ_HEAD(,qdrv_pktlogger_data) sendq_head;
	struct work_struct sendq_work;
	int sendq_scheduled;
	struct sock *netlink_socket;
	int netlink_ref;
	struct timer_list stats_timer;
	struct timer_list mem_timer;
	int mem_wp_index;
	struct qdrv_memdebug_watchpt mem_wps[MAX_MEMDEBUG_WATCHPTS];
	struct timer_list rate_timer;
	struct timer_list sysmsg_timer;
	struct timer_list flush_data;
	uint32_t *stats_uc_rx_ptr;
	uint32_t *stats_uc_rx_rate_ptr;
	uint32_t *stats_uc_rx_bf_ptr;
	uint32_t *stats_uc_tx_ptr;
	uint32_t *stats_uc_tx_rate_ptr;
	uint32_t *stats_uc_su_rates_read_ptr;
	uint32_t *stats_uc_mu_rates_read_ptr;
	uint32_t *stats_uc_scs_cnt;
	struct netdev_queue *netdev_q_ptr_w;
	struct netdev_queue *netdev_q_ptr_e;
	struct qdrv_meminfo qmeminfo;
	uint32_t queue_len;
	struct qdrv_pktlogger_stats stats;
	struct net_device *dev_emac0;
	struct net_device *dev_emac1;
	uint32_t *stats_auc_sleep_p;
	uint32_t *stats_auc_jiffies_p;
	uint32_t *stats_auc_intr_p;
	struct auc_dbg_counters *stats_auc_dbg_p;
	struct muc_rx_rates rx_rates[2];
	struct muc_rx_rates *rx_rate_pre;
	struct muc_rx_rates *rx_rate_cur;
	struct muc_rx_rates rx_ratelog[2];
	struct muc_rx_rates *rx_ratelog_pre;
	struct muc_rx_rates *rx_ratelog_cur;
	struct timer_list phy_stats_timer;
};
struct host_scanif {
	struct workqueue_struct *workqueue;
	u32 scan_sem_bit;
	u32 tx_sem_bit;
	volatile u32 *sc_res_mbox;
	volatile u32 *sc_req_mbox;
};
struct host_fifo_if {
	struct host_descfifo *fifo;
	dma_addr_t fifo_dma;
	struct host_rxdesc *pending;
	struct host_rxdesc **descp;
	int ring_size;
	struct dma_pool *df_rxdesc_cache;
};
struct host_rxif {
	struct host_fifo_if rx;
	u32 rx_sem_bit;
};
struct host_txif {
	uint16_t txdesc_cnt[QDRV_TXDESC_QUEUE_MAX];
	uint16_t list_max_size;
	uint16_t muc_thresh_high;
	uint16_t muc_thresh_low;
	struct tasklet_struct txdone_tasklet;
	struct host_ioctl *hl_ring;
	struct host_ioctl *hl_first;
	struct host_ioctl *hl_last;
	dma_addr_t hl_ring_dma;
	int hl_read;
	int hl_write;
	int hl_tosend;
	u32 hl_count;
	spinlock_t hl_flowlock;
	struct dma_pool *df_txdesc_cache;
	struct lhost_txdesc *df_txdesc_list_head;
	struct lhost_txdesc *df_txdesc_list_tail;
	volatile u32 *tx_mbox;
};
struct qtn_rateentry {
	u_int8_t re_ieeerate;
	u_int16_t   re_rate;
	u_int8_t    re_ctrlrate;
	u_int8_t    re_shortpre:1;
	u_int8_t    re_basicrate:1;
	u_int8_t    re_phytype:2;
} __packed;
struct qtn_ratetable {
	u_int8_t        rt_num;
	u_int8_t        rt_legacy_num;
	struct qtn_rateentry    *rt_entries;
} __packed;
struct qtn_channel {
	u_int16_t channel_number;	
	u_int16_t channel_freq;		
	u_int32_t channel_flags;	
	u_int16_t center_freq_40M;	
	u_int16_t center_freq_80M;	
	u_int16_t center_freq_160M;	
	u_int32_t channel_ext_flags;	
} __packed;
struct qdrv_wlan_sm_stats {
	unsigned int sm_scan_auth_fail_scan_pend;
	unsigned int sm_scan_assoc_fail_scan_pend;
	unsigned int sm_scan_pend;
	unsigned int sm_auth_pend;
	unsigned int sm_run_deauth_auth_pend;
	unsigned int sm_assoc_pend;
	unsigned int sm_run_disassoc_assoc_pend;
	unsigned int sm_nd_auth;
	unsigned int sm_nd_unauth;
	unsigned int sm_nd_auth_tot;
	unsigned int sm_sta_associated;
	unsigned int sm_state;
};
struct qdrv_wlan_tx_stats {
	unsigned int tx_enqueue_mgmt;
	unsigned int tx_enqueue_80211_data;
	unsigned int tx_enqueue_data;
	unsigned int tx_muc_enqueue;
	unsigned int tx_muc_enqueue_mbox;
	unsigned int tx_null_data;
	unsigned int tx_done_muc_ready_err;
	unsigned int tx_done_success;
	unsigned int tx_done_enable_queues;
	unsigned int tx_queue_stop;
	unsigned int tx_requeue;
	unsigned int tx_requeue_err;
	unsigned int tx_hardstart;
	unsigned int tx_complete;
	unsigned int tx_min_cl_cnt;
	unsigned int tx_dropped_config;
	unsigned int tx_dropped_mac_dead;
	unsigned int tx_channel;
	unsigned int tx_igmp;
	unsigned int tx_unknown;
	unsigned int tx_arp_req;
	unsigned int tx_copy4_mc;
	unsigned int tx_copy4_igmp;
	unsigned int tx_copy4_unknown;
	unsigned int tx_copy4;
	unsigned int tx_copy_fail;
	unsigned int tx_copy4_busy;
	unsigned int tx_copy3_mc;
	unsigned int tx_copy3_igmp;
	unsigned int tx_copy_uc;
	unsigned int tx_copy3;
	unsigned int tx_copy_mc;
	unsigned int tx_copy_mc_to_uc;
	unsigned int tx_copy_ssdp;
	unsigned int tx_drop_auth;
	unsigned int tx_drop_aid;
	unsigned int tx_drop_nodesc;
	unsigned int tx_drop_wds;
	unsigned int tx_drop_3addr;
	unsigned int tx_drop_vsp;
	unsigned int tx_drop_total;
	unsigned int tx_l2_ext_filter;
	unsigned int tx_drop_l2_ext_filter;
	unsigned int qcat_state;
	unsigned int txbf_qmat_wait;
	unsigned int prot_ip_udp;
	unsigned int prot_ip_tcp;
	unsigned int prot_ip_icmp;
	unsigned int prot_ip_igmp;
	unsigned int prot_ip_other;
	unsigned int prot_ipv6;
	unsigned int prot_arp;
	unsigned int prot_pae;
	unsigned int prot_other;
};
struct qdrv_wlan_rx_stats {
	unsigned int rx_irq;
	unsigned int rx_irq_schedule;
	unsigned int rx_beacon;
	unsigned int rx_non_beacon;
	unsigned int rx_input_all;
	unsigned int rx_input_node;
	unsigned int rx_data_snap;
	unsigned int rx_data_tods;
	unsigned int rx_data_nods;
	unsigned int rx_data_fromds;
	unsigned int rx_data_dstods;
	unsigned int rx_data_no_node;
	unsigned int rx_data_too_short;
	unsigned int rx_poll;
	unsigned int rx_poll_pending;
	unsigned int rx_poll_empty;
	unsigned int rx_poll_retrieving;
	unsigned int rx_poll_buffer_err;
	unsigned int rx_poll_skballoc_err;
	unsigned int rx_poll_stopped;
	unsigned int rx_df_numelems;
	unsigned int rx_amsdu;
	unsigned int rx_packets;
	unsigned int rx_bytes;
	unsigned int rx_poll_next;
	unsigned int rx_poll_complete;
	unsigned int rx_poll_continue;
	unsigned int rx_poll_vap_err;
	unsigned int rx_frag;
	unsigned int rx_blacklist;
	unsigned int rx_lncb_4;
	unsigned int rx_igmp;
	unsigned int rx_igmp_4;
	unsigned int rx_igmp_3_drop;
	unsigned int rx_mc_3_drop;
	unsigned int prot_ip_udp;
	unsigned int prot_ip_tcp;
	unsigned int prot_ip_icmp;
	unsigned int prot_ip_igmp;
	unsigned int prot_ip_other;
	unsigned int prot_ipv6;
	unsigned int prot_arp;
	unsigned int prot_pae;
	unsigned int prot_other;
	unsigned int rx_bf_success[QTN_STATS_NUM_BF_SLOTS];
	unsigned int rx_bf_rejected[QTN_STATS_NUM_BF_SLOTS];
	unsigned int rx_rate_train_invalid;
	unsigned int rx_mac_reserved;
	unsigned int rx_coex_bw_action;
	unsigned int rx_coex_bw_assoc;
	unsigned int rx_coex_bw_scan;
};
struct qdrv_tqe_cgq_stats {
	uint32_t	congest_qlen[TOPAZ_CONGEST_QUEUE_NUM];
	uint32_t	congest_enq_fail[TOPAZ_CONGEST_QUEUE_NUM];
};
struct qdrv_rx_evm_array {
	unsigned int rx_evm_val[NUM_ANT];
};
struct qdrv_tx_pd_array {
	uint16_t tx_pd_vol[NUM_ANT];
};
struct qdrv_netdebug_nd_stats {
	uint32_t	sch_aid;
	uint32_t	sch_mac1;
	uint32_t	sch_mac2;
	uint32_t	sch_ref;
	uint32_t	sch_muc_queued;
	uint32_t	sch_tokens;
	uint32_t	sch_qlen;
	uint32_t	sch_low_rate;
	uint32_t	sch_depth[QDRV_SCH_BANDS];
	uint32_t	sch_sent[QDRV_SCH_BANDS];
	uint32_t	sch_dropped[QDRV_SCH_BANDS];
	uint32_t	sch_victim[QDRV_SCH_BANDS];
};
struct qdrv_sch_stats {
	uint32_t	sch_users;
	uint32_t	sch_tokens;
	uint32_t	sch_cnt;
};
struct qdrv_mem_stats {
	unsigned long mem_free;
	unsigned long mem_slab_reclaimable;
	unsigned long mem_slab_unreclaimable;
	unsigned long mem_anon;
	unsigned long mem_mapped;
	unsigned long mem_cached;
};
struct qdrv_misc_stats {
	unsigned long cpuawake;
};
struct qdrv_csw_count_stats {
	uint16_t csw_by_scs;
	uint16_t csw_by_dfs;
	uint16_t csw_by_user;
	uint16_t csw_by_sampling;
	uint16_t csw_by_tdls;
	uint16_t csw_by_bgscan;
	uint16_t csw_by_ocac;
	uint16_t csw_by_ocac_run;
	uint16_t csw_by_csa;
	uint16_t csw_by_scan;
};
struct tx_power_cal {
	struct _temp_info {
		int temp_index;
		int real_temp;
		u_int8_t num_zone;
	} temp_info;
struct qdrv_wlan {
	struct ieee80211com ic;
	int unit;
	struct work_struct scan_task;
	u32 flags_ext;
	u16 flags;
	u8 rf_chipid;
	u8 rf_chip_verid;
	struct qdrv_mac *mac;
	spinlock_t lock;
	char semmap[HOST_NUM_HOSTIFQ];
	char txdoneirq;
	int rxirq;
	int scanirq;
	struct host_scanif scan_if;
	struct host_scanfifo *scan_fifo;
	struct host_txif tx_if;
	struct host_rxif rx_if;
	u32 host_sem;
	struct qtn_ratetable qw_rates[IEEE80211_MODE_MAX];
	struct qtn_ratetable *qw_currt;
	enum ieee80211_phymode qw_curmode;
	struct qdrv_wlan_tx_stats tx_stats;
	struct qdrv_wlan_rx_stats rx_stats;
	struct qdrv_csw_count_stats csw_stats;
	struct qdrv_pktlogger pktlogger;
	struct qdrv_wlan_sm_stats sm_stats;
	struct qdrv_tqe_cgq_stats cgq_stats;
	void *txbf_state;
	spinlock_t flowlock;
	struct net_device *br_dev;
	int unknown_dp_count;
	unsigned long unknown_dp_jiffies;
	struct qvsp_s *qvsp;
	struct qtn_vsp_stats *vsp_stats;
	struct tasklet_struct vsp_tasklet;
	struct timer_list vsp_ba_throt;
	uint32_t vsp_enabling;		
	uint32_t vsp_check_intvl;	
	uint32_t vsp_sync_sched_remain;	
	struct delayed_work vsp_sync_work;
	struct qdrv_br bridge_table;
	int mcs_cap;
	int mcs_odd_even;
	int tx_restrict;
	int tx_restrict_rts;
	int tx_restrict_limit;
	int tx_restrict_rate;
	uint8_t tx_swretry_agg_max;
	uint8_t tx_swretry_noagg_max;
	uint8_t tx_swretry_suspend_xmit;
	struct timer_list hr_timer;
	struct timer_list cca_timer;
	struct timer_list igmp_query_timer;
	struct work_struct cca_wq;
	struct work_struct meas_wq;
	spinlock_t cca_lock;
	struct work_struct scan_wq;
	spinlock_t scan_lock;
	void (*csa_callback)(const struct ieee80211_channel *, u_int64_t);
	struct work_struct csa_wq;
	spinlock_t csa_lock;
	struct work_struct channel_work_wq;
	int (*radar_detect_callback)(const struct ieee80211_channel *);
	unsigned long arp_last_sent;
	struct work_struct remain_chan_wq;
	struct qtn_node_shared_stats		*shared_pernode_stats_pool;
	dma_addr_t				shared_pernode_stats_phys;
	TAILQ_HEAD(, qtn_node_shared_stats)	shared_pernode_stats_head;
	struct notifier_block pm_notifier;
	struct qtn_genpcap_args genpcap_args;
	struct qdrv_sch_shared_data	*tx_sch_shared_data;
	bool				queue_enabled;
	uint16_t br_isolate;
	uint16_t br_isolate_vid;
	uint8_t restrict_wlan_ip;
	struct i2c_client *se95_temp_sensor;
	struct tx_power_cal tx_power_cal_data;
	struct shared_params *sp;
};
struct qdrv_pktlogger_hdr {
	struct udphdr udpheader;
	u_int8_t type;
	u_int8_t			opmode;
	unsigned char			src[IEEE80211_ADDR_LEN];
	u_int32_t			version;
	u_int32_t			builddate;
	char				buildstring[QDRV_NETDEBUG_BUILDSTRING_SIZE];
	u_int8_t			flags;
	u_int32_t			timestamp;
	u_int32_t			tsf_lo;
	u_int32_t			tsf_hi;
	u_int32_t			platform;
	u_int32_t			stats_len;
	char				padding[3];	
} __packed;
struct qdrv_netdebug_txbf {
	struct qdrv_pktlogger_hdr	ndb_hdr;
	u_int8_t			stvec_data[QDRV_NETDEBUG_TXBF_DATALEN];
} __packed;
struct qdrv_netdebug_mem {
	struct qdrv_pktlogger_hdr	ndb_hdr;
	u_int8_t			stvec_data[QDRV_NETDEBUG_MEM_DATALEN];
} __packed;
struct qdrv_netdebug_rate {
	struct qdrv_pktlogger_hdr	ndb_hdr;
	struct qtn_rate_su_tx_stats	rate_su_tx_stats[RATES_STATS_NUM_ADAPTATIONS];
	struct qtn_rate_mu_tx_stats	rate_mu_tx_stats[RATES_STATS_NUM_ADAPTATIONS];
	struct qtn_rate_gen_stats	rate_gen_stats;
} __packed;
struct qdrv_radar_stats {
	struct qdrv_pktlogger_hdr	ndb_hdr;
	u_int32_t			numpulses;
	u_int8_t			pulseinfo[QDRV_NETDEBUG_RADAR_PULSESIZE *
						  QDRV_NETDEBUG_RADAR_MAXPULSE];
} __packed;
struct qdrv_muc_rx_rates {
	u_int16_t			rx_mcs[IEEE80211_HT_RATE_MAXSIZE];
	u_int16_t			rx_mcs_pad;
} __packed;
struct qdrv_muc_rx_11acrates {
	u_int16_t			rx_11ac_mcs[MUC_VHT_NUM_RATES];
} __packed;
struct qdrv_netdebug_sysmsg {
	struct qdrv_pktlogger_hdr ndb_hdr;
	char msg[QDRV_NETDEBUG_SYSMSG_LENGTH];
} __packed;
struct qdrv_qdisc_stats {
	u_int32_t wifi_sent;
	u_int32_t wifi_dropped;
	u_int32_t eth_sent;
	u_int32_t eth_dropped;
};
struct qdrv_emac_stats {
	u_int32_t rx_emac0_dma_missed;
	u_int32_t rx_emac1_dma_missed;
};
struct qdrv_scs_cnt {
	uint32_t scs_iotcl;
	uint32_t scs_noqosnull;
	uint32_t scs_1stcnflct;
	uint32_t scs_qosnul_sntfail;
	uint32_t scs_2ndcnflct;
	uint32_t scs_low_dwell;
	uint32_t scs_offch_scan;
	uint32_t scs_sample_start;
	uint32_t scs_sample_stop;
};
struct qdrv_tqe_stats {
	uint32_t emac0_outc;
	uint32_t emac1_outc;
	uint32_t wmac_outc;
	uint32_t lhost_outc;
	uint32_t muc_outc;
	uint32_t dsp_outc;
	uint32_t auc_outc;
	uint32_t pcie_outc;
	uint32_t drop;
	uint32_t emac0_drop;
	uint32_t emac1_drop;
	uint32_t wmac_drop;
	uint32_t lhost_drop;
	uint32_t muc_drop;
	uint32_t dsp_drop;
	uint32_t auc_drop;
	uint32_t pcie_drop;
};
struct qdrv_hbm_stats {
	uint32_t req_lhost[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_muc[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_emac0[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_emac1[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_wmac[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_tqe[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_auc[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_dsp[TOPAZ_HBM_POOL_COUNT];
	uint32_t req_pcie[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_lhost[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_muc[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_emac0[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_emac1[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_wmac[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_tqe[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_auc[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_dsp[TOPAZ_HBM_POOL_COUNT];
	uint32_t rel_pcie[TOPAZ_HBM_POOL_COUNT];
};
struct qdrv_hbm_stats_oth {
	uint32_t hbm_req;
	uint32_t hbm_rel;
	uint32_t hbm_diff;
	uint32_t hbm_overflow;
	uint32_t hbm_underflow;
};
struct dsp_mu_stats {
	uint32_t mu_u0_aid[QTN_MU_QMAT_MAX_SLOTS];
	uint32_t mu_u1_aid[QTN_MU_QMAT_MAX_SLOTS];
	int32_t  mu_rank[QTN_MU_QMAT_MAX_SLOTS];
};
struct qdrv_netdebug_stats {
	struct qdrv_pktlogger_hdr	ndb_hdr;
	struct muc_rx_stats		stats_muc_rx;
	struct qdrv_muc_rx_rates	rates_muc_rx;
	struct qdrv_muc_rx_11acrates	rates_muc_rx_11ac;
	struct muc_rx_bf_stats		stats_muc_rx_bf;
	struct muc_tx_stats		stats_muc_tx;
	struct qdrv_emac_stats		stats_emac;
	struct qdrv_qdisc_stats		stats_qdisc;
	struct qdrv_wlan_rx_stats	stats_wlan_rx;
	struct qdrv_wlan_tx_stats	stats_wlan_tx;
	struct qdrv_wlan_sm_stats	stats_wlan_sm;
	struct qtn_rx_stats		stats_phy_rx;
	struct qtn_tx_stats		stats_phy_tx;
	struct qdrv_mem_stats		stats_mem;
	struct qdrv_misc_stats		stats_misc;
	struct qdrv_rx_evm_array	stats_evm;
	struct qdrv_csw_count_stats	stats_csw;
	struct qdrv_tx_pd_array		stats_pd_vol;
	struct qdrv_slab_watch		stats_slab;
	struct qdrv_scs_cnt		stats_scs_cnt;
	struct qdrv_auc_intr_stats	stats_auc_intr_count;
	struct auc_dbg_counters		stats_auc_debug_counts;
	struct qdrv_tqe_stats		stats_tqe;
	struct qdrv_tqe_cgq_stats	stats_cgq;
	struct qdrv_hbm_stats		stats_hbm;
	struct qdrv_hbm_stats_oth	stats_hbm_oth;
	struct dsp_mu_stats		stats_dsp_mu;
} __packed;
struct qdrv_netdebug_event {
	u_int8_t 			version;
	u_int8_t 			type;
	u_int8_t 			reserved[2];		
	u_int32_t 			tstamp;
	u_int8_t 			event_msg[QDRV_NETDEBUG_EVENT_STR_MAX + 1];
};
struct qdrv_netdebug_per_node_phystats {
	uint8_t node_macaddr[IEEE80211_ADDR_LEN];
	struct qtn_node_shared_stats per_node_phystats;
} __packed;
struct qdrv_netdebug_phystats {
	struct qdrv_pktlogger_hdr		ndb_hdr;
	struct qtn_stats			stats;
	u_int32_t				per_node_stats_count;
	struct qdrv_netdebug_per_node_phystats	per_node_stats[1];
} __packed;
struct qdrv_slab_watch {
unsigned int stat_size_tot_alloc_64;
unsigned int stat_size_cur_alloc_64;
unsigned int stat_size_act_alloc_64;
unsigned int stat_size_hwm_alloc_64;
unsigned int stat_size_tot_alloc_96;
unsigned int stat_size_cur_alloc_96;
unsigned int stat_size_act_alloc_96;
unsigned int stat_size_hwm_alloc_96;
unsigned int stat_size_tot_alloc_128;
unsigned int stat_size_cur_alloc_128;
unsigned int stat_size_act_alloc_128;
unsigned int stat_size_hwm_alloc_128;
unsigned int stat_size_tot_alloc_192;
unsigned int stat_size_cur_alloc_192;
unsigned int stat_size_act_alloc_192;
unsigned int stat_size_hwm_alloc_192;
unsigned int stat_size_tot_alloc_256;
unsigned int stat_size_cur_alloc_256;
unsigned int stat_size_act_alloc_256;
unsigned int stat_size_hwm_alloc_256;
unsigned int stat_size_tot_alloc_512;
unsigned int stat_size_cur_alloc_512;
unsigned int stat_size_act_alloc_512;
unsigned int stat_size_hwm_alloc_512;
unsigned int stat_size_tot_alloc_1024;
unsigned int stat_size_cur_alloc_1024;
unsigned int stat_size_act_alloc_1024;
unsigned int stat_size_hwm_alloc_1024;
unsigned int stat_size_tot_alloc_2048;
unsigned int stat_size_cur_alloc_2048;
unsigned int stat_size_act_alloc_2048;
unsigned int stat_size_hwm_alloc_2048;
unsigned int stat_size_tot_alloc_4096;
unsigned int stat_size_cur_alloc_4096;
unsigned int stat_size_act_alloc_4096;
unsigned int stat_size_hwm_alloc_4096;
unsigned int stat_size_tot_alloc_RX_BUF_SIZE_KMALLOC;
unsigned int stat_size_cur_alloc_RX_BUF_SIZE_KMALLOC;
unsigned int stat_size_act_alloc_RX_BUF_SIZE_KMALLOC;
unsigned int stat_size_hwm_alloc_RX_BUF_SIZE_KMALLOC;
unsigned int stat_tot_alloc_skbuff_head_cache;
unsigned int stat_cur_alloc_skbuff_head_cache;
unsigned int stat_act_alloc_skbuff_head_cache;
unsigned int stat_hwm_alloc_skbuff_head_cache;
} __packed;
struct net_device_stats {
	unsigned long	rx_packets;		
	unsigned long	tx_packets;		
	unsigned long	rx_bytes;		
	unsigned long	tx_bytes;		
	unsigned long	rx_errors;		
	unsigned long	tx_errors;		
	unsigned long	rx_dropped;		
	unsigned long	tx_dropped;		
	unsigned long	multicast;		
	unsigned long	collisions;
	unsigned long	rx_length_errors;
	unsigned long	rx_over_errors;		
	unsigned long	rx_crc_errors;		
	unsigned long	rx_frame_errors;	
	unsigned long	rx_fifo_errors;		
	unsigned long	rx_missed_errors;	
	unsigned long	tx_aborted_errors;
	unsigned long	tx_carrier_errors;
	unsigned long	tx_fifo_errors;
	unsigned long	tx_heartbeat_errors;
	unsigned long	tx_window_errors;
	unsigned long	rx_compressed;
	unsigned long	tx_compressed;
	unsigned long	rx_unicast_packets;
	unsigned long	tx_unicast_packets;
	unsigned long	tx_multicast_packets;
	unsigned long	rx_broadcast_packets;
	unsigned long	tx_broadcast_packets;
	unsigned long	rx_unknown_packets;
};
struct netdev_hw_addr {
	struct list_head	list;
	unsigned char		addr[MAX_ADDR_LEN];
	unsigned char		type;
	int			refcount;
	bool			synced;
	bool			global_use;
	struct rcu_head		rcu_head;
};
struct netdev_hw_addr_list {
	struct list_head	list;
	int			count;
};
struct hh_cache {
	struct hh_cache *hh_next;	
	atomic_t	hh_refcnt;	
	__be16		hh_type ____cacheline_aligned_in_smp;
	u16		hh_len;		
	int		(*hh_output)(struct sk_buff *skb);
	seqlock_t	hh_lock;
	(HH_DATA_MOD - (((__len - 1) & (HH_DATA_MOD - 1)) + 1))
	(((__len)+(HH_DATA_MOD-1))&~(HH_DATA_MOD - 1))
	unsigned long	hh_data[HH_DATA_ALIGN(LL_MAX_HEADER) / sizeof(long)];
};
struct header_ops {
	int	(*create) (struct sk_buff *skb, struct net_device *dev,
			   unsigned short type, const void *daddr,
			   const void *saddr, unsigned len);
	int	(*parse)(const struct sk_buff *skb, unsigned char *haddr);
	int	(*rebuild)(struct sk_buff *skb);
	int	(*cache)(const struct neighbour *neigh, struct hh_cache *hh);
	void	(*cache_update)(struct hh_cache *hh,
				const struct net_device *dev,
				const unsigned char *haddr);
};
struct netdev_boot_setup {
	char name[IFNAMSIZ];
	struct ifmap map;
};
struct napi_struct {
	struct list_head	poll_list;
	unsigned long		state;
	int			weight;
	int			(*poll)(struct napi_struct *, int);
	spinlock_t		poll_lock;
	int			poll_owner;
	unsigned int		gro_count;
	struct net_device	*dev;
	struct list_head	dev_list;
	struct sk_buff		*gro_list;
	struct sk_buff		*skb;
};
struct netdev_queue {
	struct net_device	*dev;
	struct Qdisc		*qdisc;
	unsigned long		state;
	struct Qdisc		*qdisc_sleeping;
	spinlock_t		_xmit_lock ____cacheline_aligned_in_smp;
	int			xmit_lock_owner;
	unsigned long		trans_start;
	unsigned long		tx_bytes;
	unsigned long		tx_packets;
	unsigned long		tx_dropped;
} ____cacheline_aligned_in_smp;
struct rps_map {
	unsigned int len;
	struct rcu_head rcu;
	u16 cpus[0];
};
struct rps_dev_flow {
	u16 cpu;
	u16 fill;
	unsigned int last_qtail;
};
struct rps_dev_flow_table {
	unsigned int mask;
	struct rcu_head rcu;
	struct work_struct free_work;
	struct rps_dev_flow flows[0];
};
struct rps_sock_flow_table {
	unsigned int mask;
	u16 ents[0];
};
struct netdev_rx_queue {
	struct rps_map *rps_map;
	struct rps_dev_flow_table *rps_flow_table;
	struct kobject kobj;
	struct netdev_rx_queue *first;
	atomic_t count;
} ____cacheline_aligned_in_smp;
struct net_device_ops {
	int			(*ndo_init)(struct net_device *dev);
	void			(*ndo_uninit)(struct net_device *dev);
	int			(*ndo_open)(struct net_device *dev);
	int			(*ndo_stop)(struct net_device *dev);
	netdev_tx_t		(*ndo_start_xmit) (struct sk_buff *skb,
						   struct net_device *dev);
	u16			(*ndo_select_queue)(struct net_device *dev,
						    struct sk_buff *skb);
	void			(*ndo_change_rx_flags)(struct net_device *dev,
						       int flags);
	void			(*ndo_set_rx_mode)(struct net_device *dev);
	void			(*ndo_set_multicast_list)(struct net_device *dev);
	int			(*ndo_set_mac_address)(struct net_device *dev,
						       void *addr);
	int			(*ndo_validate_addr)(struct net_device *dev);
	int			(*ndo_do_ioctl)(struct net_device *dev,
					        struct ifreq *ifr, int cmd);
	int			(*ndo_set_config)(struct net_device *dev,
					          struct ifmap *map);
	int			(*ndo_change_mtu)(struct net_device *dev,
						  int new_mtu);
	int			(*ndo_neigh_setup)(struct net_device *dev,
						   struct neigh_parms *);
	void			(*ndo_tx_timeout) (struct net_device *dev);
	struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);
	void			(*ndo_vlan_rx_register)(struct net_device *dev,
						        struct vlan_group *grp);
	void			(*ndo_vlan_rx_add_vid)(struct net_device *dev,
						       unsigned short vid);
	void			(*ndo_vlan_rx_kill_vid)(struct net_device *dev,
						        unsigned short vid);
	void                    (*ndo_poll_controller)(struct net_device *dev);
	void			(*ndo_netpoll_cleanup)(struct net_device *dev);
	int			(*ndo_set_vf_mac)(struct net_device *dev,
						  int queue, u8 *mac);
	int			(*ndo_set_vf_vlan)(struct net_device *dev,
						   int queue, u16 vlan, u8 qos);
	int			(*ndo_set_vf_tx_rate)(struct net_device *dev,
						      int vf, int rate);
	int			(*ndo_get_vf_config)(struct net_device *dev,
						     int vf,
						     struct ifla_vf_info *ivf);
	int			(*ndo_set_vf_port)(struct net_device *dev,
						   int vf,
						   struct nlattr *port[]);
	int			(*ndo_get_vf_port)(struct net_device *dev,
						   int vf, struct sk_buff *skb);
	int			(*ndo_fcoe_enable)(struct net_device *dev);
	int			(*ndo_fcoe_disable)(struct net_device *dev);
	int			(*ndo_fcoe_ddp_setup)(struct net_device *dev,
						      u16 xid,
						      struct scatterlist *sgl,
						      unsigned int sgc);
	int			(*ndo_fcoe_ddp_done)(struct net_device *dev,
						     u16 xid);
	int			(*ndo_fcoe_get_wwn)(struct net_device *dev,
						    u64 *wwn, int type);
};
struct net_device {
	char			name[IFNAMSIZ];
	struct pm_qos_request_list *pm_qos_req;
	struct hlist_node	name_hlist;
	char 			*ifalias;
	unsigned long		mem_end;	
	unsigned long		mem_start;	
	unsigned long		base_addr;	
	unsigned int		irq;		
	unsigned char		if_port;	
	unsigned char		dma;		
	unsigned long		state;
	struct list_head	dev_list;
	struct list_head	napi_list;
	struct list_head	unreg_list;
	unsigned long		features;
				 NETIF_F_SG | NETIF_F_HIGHDMA |		\
				 NETIF_F_FRAGLIST)
	int			ifindex;
	int			iflink;
	struct net_device_stats	stats;
	const struct iw_handler_def *	wireless_handlers;
	struct iw_public_data *	wireless_data;
	const struct net_device_ops *netdev_ops;
	const struct ethtool_ops *ethtool_ops;
	const struct header_ops *header_ops;
	unsigned int		flags;	
	unsigned short		gflags;
        unsigned short          priv_flags;
	unsigned short		padded;	
	unsigned char		operstate;
	unsigned char		link_mode;
	unsigned int		mtu;	
	unsigned short		type;	
	unsigned short		hard_header_len;	
	unsigned short		needed_headroom;
	unsigned short		needed_tailroom;
	struct net_device	*master;
	unsigned char		perm_addr[MAX_ADDR_LEN];
	unsigned char		addr_len;	
	unsigned short          dev_id;		
	spinlock_t		addr_list_lock;
	struct netdev_hw_addr_list	uc;	
	struct netdev_hw_addr_list	mc;	
	int			uc_promisc;
	unsigned int		promiscuity;
	unsigned int		allmulti;
	void			*dsa_ptr;	
	void 			*atalk_ptr;	
	void			*ip_ptr;	
	void                    *dn_ptr;
	void                    *ip6_ptr;
	void			*ec_ptr;	
	void			*ax25_ptr;	
	struct wireless_dev	*ieee80211_ptr;	
	unsigned long		last_rx;	
	unsigned char		*dev_addr;	
	struct netdev_hw_addr_list	dev_addrs;
	unsigned char		broadcast[MAX_ADDR_LEN];	
	struct kset		*queues_kset;
	struct netdev_rx_queue	*_rx;
	unsigned int		num_rx_queues;
	struct netdev_queue	rx_queue;
	struct netdev_queue	*_tx ____cacheline_aligned_in_smp;
	unsigned int		num_tx_queues;
	unsigned int		real_num_tx_queues;
	struct Qdisc		*qdisc;
	unsigned long		tx_queue_len;	
	spinlock_t		tx_global_lock;
	unsigned long		trans_start;	
	int			watchdog_timeo;
	struct timer_list	watchdog_timer;
	atomic_t		refcnt ____cacheline_aligned_in_smp;
	struct list_head	todo_list;
	struct hlist_node	index_hlist;
	struct list_head	link_watch_list;
	enum { NETREG_UNINITIALIZED=0,
	       NETREG_REGISTERED,	
	       NETREG_UNREGISTERING,	
	       NETREG_UNREGISTERED,	
	       NETREG_RELEASED,		
	       NETREG_DUMMY,		
	} reg_state:16;
struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev, {
					 unsigned int index)
	return &dev->_tx[index];
}
struct net *dev_net(const struct net_device *dev) {
	return dev->nd_net;
	return &init_net;
}
struct napi_gro_cb {
	void *frag0;
	unsigned int frag0_len;
	int data_offset;
	int same_flow;
	int flush;
	int count;
	int free;
};
struct packet_type {
	__be16			type;	
	struct net_device	*dev;	
	int			(*func) (struct sk_buff *,
					 struct net_device *,
					 struct packet_type *,
					 struct net_device *);
	struct sk_buff		*(*gso_segment)(struct sk_buff *skb,
						int features);
	int			(*gso_send_check)(struct sk_buff *skb);
	struct sk_buff		**(*gro_receive)(struct sk_buff **head,
					       struct sk_buff *skb);
	int			(*gro_complete)(struct sk_buff *skb);
	void			*af_packet_priv;
	struct list_head	list;
};
struct softnet_data {
	struct Qdisc		*output_queue;
	struct Qdisc		**output_queue_tailp;
	struct list_head	poll_list;
	struct sk_buff		*completion_queue;
	struct sk_buff_head	process_queue;
	unsigned int		processed;
	unsigned int		time_squeeze;
	unsigned int		cpu_collision;
	unsigned int		received_rps;
	struct softnet_data	*rps_ipi_list;
	struct call_single_data	csd ____cacheline_aligned_in_smp;
	struct softnet_data	*rps_ipi_next;
	unsigned int		cpu;
	unsigned int		input_queue_head;
	unsigned int		input_queue_tail;
	unsigned		dropped;
	struct sk_buff_head	input_pkt_queue;
	struct napi_struct	backlog;
};
